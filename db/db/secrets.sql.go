// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: secrets.sql

package db

import (
	"context"
	"database/sql"
)

const cleanSecrets = `-- name: CleanSecrets :many
DELETE FROM secrets
WHERE deleted = true
RETURNING id, owner, kind, name, value, created, modified, deleted
`

func (q *Queries) CleanSecrets(ctx context.Context) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, cleanSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Kind,
			&i.Name,
			&i.Value,
			&i.Created,
			&i.Modified,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (
  owner,
  kind,
  name,
  value,
  created,
  modified
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner, kind, name, value, created, modified, deleted
`

type CreateSecretParams struct {
	Owner    sql.NullString `json:"owner"`
	Kind     sql.NullInt32  `json:"kind"`
	Name     sql.NullString `json:"name"`
	Value    []byte         `json:"value"`
	Created  sql.NullTime   `json:"created"`
	Modified sql.NullTime   `json:"modified"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, createSecret,
		arg.Owner,
		arg.Kind,
		arg.Name,
		arg.Value,
		arg.Created,
		arg.Modified,
	)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Kind,
		&i.Name,
		&i.Value,
		&i.Created,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secrets
WHERE owner = $1 AND kind = $2 AND name = $3
`

type DeleteSecretParams struct {
	Owner sql.NullString `json:"owner"`
	Kind  sql.NullInt32  `json:"kind"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) DeleteSecret(ctx context.Context, arg DeleteSecretParams) error {
	_, err := q.db.ExecContext(ctx, deleteSecret, arg.Owner, arg.Kind, arg.Name)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT id, owner, kind, name, value, created, modified, deleted FROM secrets
WHERE owner = $1 AND kind = $2 AND name = $3
LIMIT $1
`

type GetSecretParams struct {
	Limit int32          `json:"limit"`
	Kind  sql.NullInt32  `json:"kind"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) GetSecret(ctx context.Context, arg GetSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecret, arg.Limit, arg.Kind, arg.Name)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Kind,
		&i.Name,
		&i.Value,
		&i.Created,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const getSecretsByKind = `-- name: GetSecretsByKind :many
SELECT id, owner, kind, name, value, created, modified, deleted FROM secrets
WHERE owner = $1 AND kind = $2
`

type GetSecretsByKindParams struct {
	Owner sql.NullString `json:"owner"`
	Kind  sql.NullInt32  `json:"kind"`
}

func (q *Queries) GetSecretsByKind(ctx context.Context, arg GetSecretsByKindParams) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, getSecretsByKind, arg.Owner, arg.Kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Kind,
			&i.Name,
			&i.Value,
			&i.Created,
			&i.Modified,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecretsByUser = `-- name: GetSecretsByUser :many
SELECT id, owner, kind, name, value, created, modified, deleted FROM secrets
WHERE owner = $1
`

func (q *Queries) GetSecretsByUser(ctx context.Context, owner sql.NullString) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, getSecretsByUser, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Kind,
			&i.Name,
			&i.Value,
			&i.Created,
			&i.Modified,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSecretDeleted = `-- name: MarkSecretDeleted :exec
UPDATE secrets
SET deleted = true
WHERE owner = $1 AND kind = $2 AND name = $3
`

type MarkSecretDeletedParams struct {
	Owner sql.NullString `json:"owner"`
	Kind  sql.NullInt32  `json:"kind"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) MarkSecretDeleted(ctx context.Context, arg MarkSecretDeletedParams) error {
	_, err := q.db.ExecContext(ctx, markSecretDeleted, arg.Owner, arg.Kind, arg.Name)
	return err
}
