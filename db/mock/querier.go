// Code generated by MockGen. DO NOT EDIT.
// Source: gophkeeper/db/db (interfaces: Querier)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	db "gophkeeper/db/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CleanSecrets mocks base method.
func (m *MockQuerier) CleanSecrets(arg0 context.Context) ([]db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSecrets", arg0)
	ret0, _ := ret[0].([]db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanSecrets indicates an expected call of CleanSecrets.
func (mr *MockQuerierMockRecorder) CleanSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSecrets", reflect.TypeOf((*MockQuerier)(nil).CleanSecrets), arg0)
}

// CreateSecret mocks base method.
func (m *MockQuerier) CreateSecret(arg0 context.Context, arg1 db.CreateSecretParams) (db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockQuerierMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockQuerier)(nil).CreateSecret), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockQuerier) DeleteSecret(arg0 context.Context, arg1 db.DeleteSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockQuerierMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockQuerier)(nil).DeleteSecret), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockQuerier) GetSecret(arg0 context.Context, arg1 db.GetSecretParams) (db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockQuerierMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockQuerier)(nil).GetSecret), arg0, arg1)
}

// GetSecretsByKind mocks base method.
func (m *MockQuerier) GetSecretsByKind(arg0 context.Context, arg1 db.GetSecretsByKindParams) ([]db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByKind", arg0, arg1)
	ret0, _ := ret[0].([]db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByKind indicates an expected call of GetSecretsByKind.
func (mr *MockQuerierMockRecorder) GetSecretsByKind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByKind", reflect.TypeOf((*MockQuerier)(nil).GetSecretsByKind), arg0, arg1)
}

// GetSecretsByUser mocks base method.
func (m *MockQuerier) GetSecretsByUser(arg0 context.Context, arg1 string) ([]db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsByUser indicates an expected call of GetSecretsByUser.
func (mr *MockQuerierMockRecorder) GetSecretsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsByUser", reflect.TypeOf((*MockQuerier)(nil).GetSecretsByUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), arg0, arg1)
}

// MarkSecretDeleted mocks base method.
func (m *MockQuerier) MarkSecretDeleted(arg0 context.Context, arg1 db.MarkSecretDeletedParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSecretDeleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSecretDeleted indicates an expected call of MarkSecretDeleted.
func (mr *MockQuerierMockRecorder) MarkSecretDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSecretDeleted", reflect.TypeOf((*MockQuerier)(nil).MarkSecretDeleted), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockQuerier) UpdateSecret(arg0 context.Context, arg1 db.UpdateSecretParams) (db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockQuerierMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockQuerier)(nil).UpdateSecret), arg0, arg1)
}
